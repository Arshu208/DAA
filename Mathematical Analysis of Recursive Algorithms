def find_ways_to_exit_grid(m, n, N, start_i, start_j):
    dp = [[ [0] * n for _ in range(m)] for _ in range(N + 1)]
    dp[0][start_i][start_j] = 1
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    for step in range(N):
        new_dp = [[ [0] * n for _ in range(m)] for _ in range(N + 1)]
        for x in range(m):
            for y in range(n):
                if dp[step][x][y] > 0:
                    for dx, dy in directions:
                        new_x, new_y = x + dx, y + dy
                        if 0 <= new_x < m and 0 <= new_y < n:
                            new_dp[step + 1][new_x][new_y] += dp[step][x][y]
                        else:
                            # Out of bounds, count it
                            new_dp[step + 1][0][0] += dp[step][x][y] 
        dp = new_dp
    ways_to_exit = dp[N][0][0] # This is where the ball is counted if it exits the grid boundary
    return ways_to_exit
m1, n1, N1, i1, j1 = 2, 2, 2, 0, 0
print("Number of ways to move out of the grid:", find_ways_to_exit_grid(m1, n1, N1, i1, j1))
m2, n2, N2, i2, j2 = 1, 3, 3, 0, 1
print("Number of ways to move out of the grid:", find_ways_to_exit_grid(m2, n2, N2, i2, j2))
