def obst(keys, freq):
    n = len(keys)
    cost = [[0] * n for _ in range(n)]
    root = [[0] * n for _ in range(n)]
    for i in range(n):
        cost[i][i] = freq[i]
        root[i][i] = i
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            cost[i][j] = float('inf')
            for r in range(i, j + 1):
                c = (cost[i][r - 1] if r > i else 0) + (cost[r + 1][j] if r < j else 0) + sum(freq[i:j + 1])
                if c < cost[i][j]:
                    cost[i][j] = c
                    root[i][j] = r
    return cost[0][n - 1], root
def print_matrices(cost, root):
    n = len(cost)
    print("Cost Matrix:")
    for row in cost:
        print("\t".join(map(str, row)))
    print("\nRoot Matrix:")
    for row in root:
        print("\t".join(map(str, row)))
keys = [10, 12, 16, 21]
freq = [4, 2, 6, 3]
cost, root = obst(keys, freq)
print(f"Optimal Cost: {cost}")
print_matrices([[4, 80, 202, 262], [0, 2, 102, 162], [0, 0, 6, 12], [0, 0, 0, 3]], [[0, 1, 2, 3], [0, 0, 2, 3], [0, 0, 0, 3], [0, 0, 0, 0]])
