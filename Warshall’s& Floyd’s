import heapq
import math
def networkDelayTime(times, n, k):
    graph = [[] for _ in range(n + 1)]
    for u, v, w in times:
        graph[u].append((v, w))
    def dijkstra(start):
        distances = [math.inf] * (n + 1)
        distances[start] = 0
        pq = [(0, start)]  # (distance, node)
        while pq:
            current_dist, u = heapq.heappop(pq)
            if current_dist > distances[u]:
                continue            
            for v, weight in graph[u]:
                distance = current_dist + weight
                if distance < distances[v]:
                    distances[v] = distance
                    heapq.heappush(pq, (distance, v))        
        return distances
    distances = dijkstra(k)
    max_time = max(distances[1:]) 
    return max_time if max_time < math.inf else -1
times = [[2, 1, 1], [2, 3, 1], [3, 4, 1]]
n = 4
k = 2
output = networkDelayTime(times, n, k)
print(output) 
