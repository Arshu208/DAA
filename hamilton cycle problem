def is_safe(graph, path, pos, v):
    if graph[path[pos - 1]][v] == 0:
        return False
    if v in path:
        return False
    return True
def hamiltonian_cycle_util(graph, path, pos, n):
    # Base case: If all vertices are included in the path
    if pos == n:
        return graph[path[pos - 1]][path[0]] == 1
    for v in range(1, n):
        if is_safe(graph, path, pos, v):
            path[pos] = v
            if hamiltonian_cycle_util(graph, path, pos + 1, n):
                return True
            path[pos] = -1    
    return False
def check_hamiltonian_cycle(edges, n):
    graph = [[0] * n for _ in range(n)]
    for u, v in edges:
        graph[u][v] = 1
        graph[v][u] = 1  
    path = [-1] * n
    path[0] = 0  
    if hamiltonian_cycle_util(graph, path, 1, n):
        return True
    return False
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
has_cycle = check_hamiltonian_cycle(edges, n)
print(f"Does the graph have a Hamiltonian cycle? {has_cycle}")
