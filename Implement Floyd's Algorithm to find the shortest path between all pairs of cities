import numpy as np
def floyd_warshall(n, edges):
    dist = np.full((n, n), float('inf'))
    for i in range(n):
        dist[i][i] = 0
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w  
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    return dist
def find_city_with_most_neighbors(n, dist, distanceThreshold):
    neighbors_count = [0] * n    
    for i in range(n):
        for j in range(n):
            if dist[i][j] <= distanceThreshold and i != j:
                neighbors_count[i] += 1
    max_neighbors = max(neighbors_count)
    for i in range(n):
        if neighbors_count[i] == max_neighbors:
            return i
def shortest_path(dist, start, end):
    return dist[start][end]
n = 5
edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]]
distanceThreshold = 2
dist = floyd_warshall(n, edges)
print("Distance matrix after Floyd-Warshall:")
print(dist)
city_with_most_neighbors = find_city_with_most_neighbors(n, dist, distanceThreshold)
print(f"City with the most neighbors within distance threshold: {city_with_most_neighbors}")
start_city = 2
end_city = 0
path_length = shortest_path(dist, start_city, end_city)
print(f"Shortest path from city {start_city} to city {end_city}: {path_length}")
