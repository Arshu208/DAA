import heapq
import math
def dijkstra(n, graph, start):
    distances = [math.inf] * n
    distances[start] = 0
    pq = [(0, start)]  
    while pq:
        current_dist, u = heapq.heappop(pq)
        if current_dist > distances[u]:
            continue
        for v, weight in graph[u]:
            distance = current_dist + weight
            if distance < distances[v]:
                distances[v] = distance
                heapq.heappush(pq, (distance, v))
    return distances
def findTheCity(n, edges, distanceThreshold):
    graph = [[] for _ in range(n)]
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))
    best_city = -1
    min_reachable_count = float('inf')
    for city in range(n):
        distances = dijkstra(n, graph, city)
        reachable_count = sum(1 for dist in distances if dist <= distanceThreshold)
        if (reachable_count < min_reachable_count) or (
            reachable_count == min_reachable_count and city > best_city
        ):
            min_reachable_count = reachable_count
            best_city = city
    return best_city
n = 4
edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]]
distanceThreshold = 4
output = findTheCity(n, edges, distanceThreshold)
print(output) 
