def max_degree_vertex_cover(n, edges):
    vertex_cover = set()
    degree = {i: 0 for i in range(n)}
    adjacency_list = {i: set() for i in range(n)}
    for u, v in edges:
        adjacency_list[u].add(v)
        adjacency_list[v].add(u)
        degree[u] += 1
        degree[v] += 1
    edge_set = set(edges)
    while edge_set:
        max_degree_vertex = max(degree, key=degree.get)
        vertex_cover.add(max_degree_vertex)
        edges_to_remove = {edge for edge in edge_set if max_degree_vertex in edge}
        edge_set.difference_update(edges_to_remove)
        for edge in edges_to_remove:
            u, v = edge
            degree[u] -= 1
            degree[v] -= 1
    return list(vertex_cover)
n = 6
m = 7
edges = [(0, 1), (0, 2), (1, 3), (1, 4), (2, 4), (3, 5), (4, 5)]
vertex_cover = max_degree_vertex_cover(n, edges)
print("Vertex Cover:", vertex_cover)
