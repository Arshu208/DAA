from itertools import combinations
def generate_subset_sums(nums):
    subset_sums = []
    n = len(nums)
    for i in range(n + 1):
        for combo in combinations(nums, i):
            subset_sums.append(sum(combo))
    return subset_sums
def closest_subset_sum(set1, set2, target):
    subset_sums1 = generate_subset_sums(set1)
    subset_sums2 = generate_subset_sums(set2)
    subset_sums1.sort()
    subset_sums2.sort()    
    closest_sum = float('inf')
    for sum1 in subset_sums1:
        low, high = 0, len(subset_sums2) - 1
        while low <= high:
            mid = (low + high) // 2
            sum2 = subset_sums2[mid]
            current_sum = sum1 + sum2
            if abs(target - current_sum) < abs(target - closest_sum):
                closest_sum = current_sum
            if current_sum < target:
                low = mid + 1
            else:
                high = mid - 1
    return closest_sum
def meet_in_the_middle(set, target):
    mid = len(set) // 2
    set1 = set[:mid]
    set2 = set[mid:] 
    return closest_subset_sum(set1, set2, target)
 a) Set[] = {45, 34, 4, 12, 5, 2} Target Sum: 42
set_a = [45, 34, 4, 12, 5, 2]
target_a = 42
print("Closest sum to target in set_a:", meet_in_the_middle(set_a, target_a))

# b) Set[] = {1, 3, 2, 7, 4, 6} Target Sum: 10
set_b = [1, 3, 2, 7, 4, 6]
target_b = 10
print("Closest sum to target in set_b:", meet_in_the_middle(set_b, target_b))
