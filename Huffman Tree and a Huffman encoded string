import heapq
class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None
    def __lt__(self, other):
        return self.freq < other.freq
def build_huffman_tree(characters, frequencies):
    priority_queue = [Node(char, freq) for char, freq in zip(characters, frequencies)]
    heapq.heapify(priority_queue)
    while len(priority_queue) > 1:
        left = heapq.heappop(priority_queue)
        right = heapq.heappop(priority_queue)
        merged = Node(None, left.freq + right.freq)
        merged.left = left
        merged.right = right
        heapq.heappush(priority_queue, merged)
    return priority_queue[0]
def decode_huffman_tree(root, encoded_string):
    decoded_message = []
    current_node = root
    for bit in encoded_string:
        if bit == '0':
            current_node = current_node.left
        else:
            current_node = current_node.right     
        if current_node.char is not None:
            decoded_message.append(current_node.char)
            current_node = root 
    return ''.join(decoded_message)
def huffman_decoding(characters, frequencies, encoded_string):
    root = build_huffman_tree(characters, frequencies)
    return decode_huffman_tree(root, encoded_string)
characters = ['a', 'b', 'c', 'd']
frequencies = [5, 9, 12, 13]
encoded_string = '1101100111110'
print("Decoded Message:", huffman_decoding(characters, frequencies, encoded_string))
