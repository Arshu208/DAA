def solve_n_queens(board, row=0, queens=[]):
    if row == len(board):
        return [queens]
    solutions = []
    for col in range(len(board[0])):
        if is_safe(board, row, col, queens):
            solutions += solve_n_queens(board, row + 1, queens + [col])
    return solutions
def is_safe(board, row, col, queens):
    if col in queens: return False
    for r, c in enumerate(queens):
        if abs(r - row) == abs(c - col): return False
    return True
board_8x10 = [[0]*10 for _ in range(8)]
solutions_8x10 = solve_n_queens(board_8x10)
print("8x10 Board Solutions:", solutions_8x10)
board_5x5 = [[0]*5 for _ in range(5)]
board_5x5[2][2] = 1  # obstacle
solutions_5x5 = solve_n_queens(board_5x5)
print("5x5 Board with Obstacles Solutions:", solutions_5x5)
board_6x6 = [[0]*6 for _ in range(6)]
restricted_positions = [(1, 1), (3, 3)]
for r, c in restricted_positions:
    board_6x6[r][c] = 1  # restricted
solutions_6x6 = solve_n_queens(board_6x6)
print("6x6 Board with Restricted Positions Solutions:", solutions_6x6)
